$in_mq: false !global;

@mixin px-rem($property, $values...) {
	$pxValues: ();
	$remValues: ();

	@each $value in $values {
		$val: strip-units($value);
		@if index("initial" "inherit" "auto" 0, $value) != null {
			$pxValues: append($pxValues, $val);
			$remValues: append($remValues, $val);
		} @else {
			$pxValues: append($pxValues, $val*1px);
			$remValues: append($remValues, rem($val) );
		}
	}
	@if $in_mq = false {
		#{$property}: $pxValues;
	}
	#{$property}: $remValues;
}
@mixin fs($number) {
	@include px-rem(font-size, $number);
}

@mixin center($hz:true,$vt:true) {
	.csstransforms & {
		position: relative;
		@if $hz == true and $vt == true {
			top: 50%;
			left: 50%;
			transform: translateX(-50%) translateY(-50%);
		} @else if $hz == true {
			left: 50%;
			transform: translateX(-50%);
		} @else if $vt == true {
			top: 50%;
			transform: translateY(-50%);
		}
	}
}

@mixin hide($bp, $reset: null) {
	@if $reset {
		@include bp($bp) {
			display: block;
			width: auto;
			height: auto;
			overflow: auto;
			clip: none;
		}
	} @else {
		@if $bp == all {
			display: none;
			width: 0;
			height: 0;
			overflow: hidden;
			clip: rect(0,0,0,0);
		} @else {
			@include bp($bp) {
				display: none;
				width: 0;
				height: 0;
				overflow: hidden;
				clip: rect(0,0,0,0);
			}
		}
	}
}

@mixin bp($name) {
	@if map-has-key($breakpoints, $name) == null {
		@warn "Invalid breakpoint `#{$name}`.";
	} @else {
		@if map-get($breakpoints, $name) {
			$in_mq: true !global;
			@media (min-width: map-get($breakpoints, $name)) {
				@content;
			}
			$in_mq: false !global;
		} @else {
			@content;
		}
	}
}

@mixin fsmooth($yes: yes) {
	@if $yes == 'no' {
		-webkit-font-smoothing: subpixel-antialiased;
		-moz-osx-font-smoothing: subpixel-antialiased;
	} @else {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: antialiased;
	}
}